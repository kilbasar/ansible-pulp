# If adding new functions to this file, note that you can add help text to the function
# by defining a variable with name _<function>_help containing the help text

SERVICES=("pulp-content-app pulp-worker@1 pulp-worker@2 pulp-resource-manager pulp-api")

_paction() {
    echo systemctl $@ ${SERVICES}
    sudo systemctl $@ ${SERVICES}
}

pstart() {
    _paction start
}
_pstart_help="Start all pulp-related services"

pstop() {
    _paction stop
}
_pstop_help="Stop all pulp-related services"

prestart() {
    _paction restart
}
_prestart_help="Restart all pulp-related services"

pstatus() {
    _paction status
}
_pstatus_help="Report the status of all pulp-related services"

pdbreset() {
    workon pulp
    pstop
    django-admin reset_db --noinput
    django-admin migrate
    django-admin reset-admin-password --password {{ pulp_default_admin_password }}
}
_pdbreset_help="Reset the Pulp database"
# can get away with not resetting terminal settings here since it gets reset in phelp
_pdbreset_help="$_dbreset_help - `setterm -foreground red -bold on`THIS DESTROYS YOUR PULP DATA"

pclean() {
    pdbreset
    sudo rm -rf {{ pulp_user_home }}/artifact
    django-admin collectstatic --noinput --link
}
_pclean_help="Restore pulp to a clean-installed state"
# can get away with not resetting terminal settings here since it gets reset in phelp
_pclean_help="$_pclean_help - `setterm -foreground red -bold on`THIS DESTROYS YOUR PULP DATA"

pjournal() {
    # build up the journalctl cmdline per-unit
    journal_cmd="journalctl"
    for svc in ${SERVICES}; do
        journal_cmd="$journal_cmd -u $svc"
    done

    if [ -z $1 ]; then
        # not passed any args, follow the units' journals by default
        $journal_cmd -f
    else
        # passed some args, send all args through to journalctl
        $journal_cmd $@
    fi
}
_pjournal_help="Interact with the journal for pulp-related units
    pjournal takes optional journalctl args e.g. 'pjournal -r', runs pjournal -f by default"

populate_pulp2() {
    sudo systemctl stop httpd pulp_workers pulp_resource_manager pulp_celerybeat
    mongo pulp_database --eval "db.dropDatabase()"
    sudo rm -rf /var/lib/pulp/content
    sudo rm -rf /var/lib/pulp/published
    sudo -u apache pulp-manage-db;
    sudo systemctl start httpd pulp_workers pulp_resource_manager pulp_celerybeat
    pulp-admin login -u admin -p admin
    pulp-admin iso repo create --feed https://repos.fedorapeople.org/pulp/pulp/fixtures/file/ --repo-id file
    pulp-admin iso repo create --feed https://repos.fedorapeople.org/pulp/pulp/fixtures/file2/ --repo-id file2 --download-policy on_demand
    pulp-admin iso repo create --feed https://repos.fedorapeople.org/pulp/pulp/fixtures/file-many/ --repo-id file-many --download-policy on_demand
    pulp-admin iso repo create --feed https://repos.fedorapeople.org/pulp/pulp/fixtures/file-large/ --repo-id file-large
    pulp-admin iso repo sync run --repo-id file &
    pulp-admin iso repo sync run --repo-id file2 &
    pulp-admin iso repo sync run --repo-id file-many &
    pulp-admin iso repo sync run --repo-id file-large &
}

_populate_pulp2_help="Resets Pulp 2 and syncs 4 ISO repos."

phelp() {
    # get a list of declared functions, filter out ones with leading underscores as "private"
    funcs=$(declare -F | awk '{ print $3 }'| grep -v ^_)

    # for each func, if a help string is defined, assume it's a pulp function and print its help
    # (this is bash introspection via variable variables)
    for func in $funcs; do
        # get the "help" variable name for this function
        help_var="_${func}_help"
        # use ${!<varname>} syntax to eval the help_var
        help=${!help_var}
        # If the help var had a value, echo its value here (the value is function help text)
        if [ ! -z "$help" ]; then
            # make the function name easy to spot
            setterm -foreground yellow -bold on
            echo -n "$func"
            # reset terminal formatting before printing the help text
            # (implicitly format it as normal text)
            setterm -default
            echo ": $help"
        fi
    done

    # explicitly restore terminal formatting is reset before exiting function
    setterm -default
}
_phelp_help="Print this help"

pyclean () {
        find . -type f -name "*.py[co]" -delete
        find . -type d -name "__pycache__" -delete
}
_pyclean_help="Cleanup extra python files"
